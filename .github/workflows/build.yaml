name: Android Build

# ワークフローが実行されるトリガーを指定
on:
  push:
    branches:
      - '**'
    paths:
      - '.github/workflows/build.yml'
      - 'android/**'
      - 'test/**'
      - 'ios/**'
      - '*.yaml'
      - '*.lock'
      - 'lib/**'

  pull_request:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release'
        type: boolean
        required: true
        default: false
      generate_release_notes:
        description: 'Generate Release Notes'
        type: boolean
        required: true
        default: true
      build_type: # <--- 変更点: ビルドタイプを選択する入力を追加
        description: 'APK Build Type (split per ABI or single universal)'
        type: choice
        required: true
        options:
          - split
          - single
        default: 'split'

jobs:
  build:
    # 実行環境としてUbuntuの最新版を使用
    runs-on: ubuntu-latest
    outputs: # outputs を定義して他のジョブから参照可能にする
      version: ${{ steps.get_version.outputs.version }}
      # <--- 変更点: deployジョブでビルドタイプを判定するためにoutputsを追加
      build_type: ${{ github.event.inputs.build_type || 'split' }}

    steps:
      # Step 1: リポジトリのコードをチェックアウト
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Java Development Kit (JDK) をセットアップ
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # Step 3: Flutter SDK をセットアップ
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      # Step 4: Flutterの依存関係を取得
      - name: Get Flutter dependencies
        run: flutter pub get

      # Step 5: (オプション) ビルド前にクリーンアップ
      # - name: Clean Flutter project
      #   run: flutter clean

      # Step 6: Android APK をビルド
      # <--- 変更点: 以下の2つのステップでビルド方法を分岐 --- >

      # 分割APKをビルド (デフォルトまたは手動で'split'を選択した場合)
      - name: Build APK (Split per ABI)
        if: ${{ (github.event.inputs.build_type || 'split') == 'split' }}
        run: flutter build apk --release --split-per-abi --build-number=${{ github.run_number }}

      # 単一APKをビルド (手動で'single'を選択した場合)
      - name: Build APK (Single Universal)
        if: ${{ github.event.inputs.build_type == 'single' }}
        run: flutter build apk --release --build-number=${{ github.run_number }}
        
      # Step 7: pubspec.yaml からバージョンを読み取る
      - name: Read version from pubspec.yaml
        id: get_version
        run: |
          echo "version=$(grep '^version: ' pubspec.yaml | sed 's/version: //')" >> $GITHUB_OUTPUT

      # Step 8: ビルドされたAPKを成果物としてアップロード
      # <--- 変更点: 以下の2つのステップでアップロードするファイルを分岐 --- >

      # 分割APKをアップロード
      - name: Upload Split APKs Artifact
        if: ${{ (github.event.inputs.build_type || 'split') == 'split' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-apk # deploy ジョブで参照するアーティファクト名
          path: build/app/outputs/flutter-apk/app-*-release.apk

      # 単一APKをアップロード
      - name: Upload Single APK Artifact
        if: ${{ github.event.inputs.build_type == 'single' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/apk/release/app-release.apk

  deploy:
    runs-on: ubuntu-latest
    needs: build # build ジョブの完了を待つ
    if: github.event.inputs.release == 'true' # release 入力が true の場合のみ実行
    steps:
      - name: Checkout code # リリースノート生成のためにリポジトリのコードをチェックアウト
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # タグやコミット履歴をすべて取得

      - name: Download APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-apk # build ジョブでアップロードされたアーティファクト名
          path: artifacts/apk/ # ダウンロード先のディレクトリ

      # <--- 変更点: 以下の2つのステップでリリースするファイルを分岐 --- >

      # 分割APKをリリース
      - name: Release with Split APKs
        if: ${{ needs.build.outputs.build_type == 'split' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: ${{ github.event.inputs.generate_release_notes }}
          files: artifacts/apk/app-*-release.apk # 分割APKのパス

      # 単一APKをリリース
      - name: Release with Single APK
        if: ${{ needs.build.outputs.build_type == 'single' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: ${{ github.event.inputs.generate_release_notes }}
          files: artifacts/apk/app-release.apk # 単一APKのパス